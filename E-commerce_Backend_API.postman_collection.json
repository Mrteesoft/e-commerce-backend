{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "E-commerce Backend API",
		"description": "Complete Postman collection for testing the E-commerce Backend API with all endpoints, test cases, and sample payloads.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Server is running message\", function () {",
							"    pm.expect(pm.response.text()).to.include('Server is up and Running');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "Health check endpoint to verify server is running"
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response contains products array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"    pm.expect(jsonData.count).to.be.a('number');",
							"    pm.expect(jsonData.count).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Products have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    var product = jsonData.data[0];",
							"    pm.expect(product).to.have.property('id');",
							"    pm.expect(product).to.have.property('name');",
							"    pm.expect(product).to.have.property('price');",
							"    pm.expect(product).to.have.property('category');",
							"    pm.expect(product).to.have.property('imageUrl');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				},
				"description": "Retrieves all products from the API"
			},
			"response": []
		},
		{
			"name": "Get Single Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains single product\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data).to.be.an('object');",
							"    pm.expect(jsonData.data.id).to.eql('1');",
							"    pm.expect(jsonData.data.name).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Product has all required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    var product = jsonData.data;",
							"    pm.expect(product).to.have.property('name');",
							"    pm.expect(product).to.have.property('description');",
							"    pm.expect(product).to.have.property('price');",
							"    pm.expect(product).to.have.property('category');",
							"    pm.expect(product).to.have.property('brand');",
							"    pm.expect(product).to.have.property('stock');",
							"    pm.expect(product).to.have.property('imageUrl');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"1"
					]
				},
				"description": "Retrieves a single product by ID (testing with ID = 1)"
			},
			"response": []
		},
		{
			"name": "Get Product by Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response indicates product not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"999"
					]
				},
				"description": "Tests error handling for non-existent product ID"
			},
			"response": []
		},
		{
			"name": "Get Products by Category - Apparel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All products are Apparel category\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    jsonData.data.forEach(function(product) {",
							"        pm.expect(product.category).to.eql('Apparel');",
							"    });",
							"});",
							"",
							"pm.test(\"Returns expected number of Apparel products\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.count).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products?category=Apparel",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "Apparel"
						}
					]
				},
				"description": "Filters products by Apparel category"
			},
			"response": []
		},
		{
			"name": "Get Products by Category - Electronics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All products are Electronics category\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    jsonData.data.forEach(function(product) {",
							"        pm.expect(product.category).to.eql('Electronics');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products?category=Electronics",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "Electronics"
						}
					]
				},
				"description": "Filters products by Electronics category"
			},
			"response": []
		},
		{
			"name": "Create New Product - Valid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Product created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include('created successfully');",
							"    pm.expect(jsonData.data).to.be.an('object');",
							"    pm.expect(jsonData.data.id).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Created product has correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.eql('Premium Wireless Headphones');",
							"    pm.expect(jsonData.data.price).to.eql(199.99);",
							"    pm.expect(jsonData.data.category).to.eql('Electronics');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Premium Wireless Headphones\",\n  \"description\": \"High-quality wireless headphones with active noise cancellation, 30-hour battery life, and premium sound quality. Perfect for music lovers and professionals.\",\n  \"price\": 199.99,\n  \"category\": \"Electronics\",\n  \"brand\": \"AudioTech\",\n  \"stock\": 50,\n  \"imageUrl\": \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400&h=400&fit=crop\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				},
				"description": "Creates a new product with valid data payload"
			},
			"response": []
		},
		{
			"name": "Create Product - Invalid Data (Missing Required Fields)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Validation error response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('validation');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"\",\n  \"price\": \"invalid_price\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				},
				"description": "Tests validation with invalid/missing required fields"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4000",
			"type": "string"
		}
	]
}
